import { useState, useEffect, useReducer } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
// import styles from '../styles/Home.module.css'
import styles from '../styles/modules/App.module.css'
import { Theme, Title } from '../src/@types/app'
import { Board as BoardType, Task, Status } from '../src/@types/board'

import { useAppContext } from '../src/context/useAppContext'
import { useBoard } from '../src/hooks/useBoard'

// Components
import { Header } from '../src/components/Header/Header'
import { TaskForm } from '../src/components/Forms/TaskForm'
import { SubtaskForm } from '../src/components/Forms/SubtaskForm'
import { BoardForm } from '../src/components/Forms/BoardForm'
import { Remove } from '../src/components/Forms/Remove'
import { Board } from '../src/components/Board/Board'
import { Sidebar } from '../src/components/Sidebar/Sidebar'
import { Overlay } from '../src/components/Overlay'

const initialPopupState = {
  taskPopup: false,
  subtaskPopup: false,
  boardPopup: false,
  removePopup: false,
  sidebarPopup: false,
}
type SubtaskEditType = {
  status: Status
  index: number
}
const initialSubtaskEditKey: SubtaskEditType = {
  status: 'todo',
  index: -1,
}
export type Action = {
  type: string
}

const Home: NextPage = () => {
  // TODO add character limit
  const [isMobile, setIsMobile] = useState<boolean>(true)
  const [isPopupOpen, setIsPopupOpen] = useState(initialPopupState)
  const [subtaskEditKey, setSubtaskEditKey] = useState<SubtaskEditType>(
    initialSubtaskEditKey
  )

  let {
    kanban,
    actionKanban,
    toggleTheme,
    theme,
    activeBoard,
    handleActiveBoard,
    boardList,
  } = useAppContext()

  const [board, setBoard] = useReducer(useBoard, activeBoard)

  let { status: taskStatus, index: taskIndex } = subtaskEditKey
  let tas = board.tasks.find((task) => task.id == taskIndex)!

  type BoardObj = Task
  let actionBoard = (type: string, key: string, value: Task | BoardType) => {
    setBoard({
      type,
      payload: { key, value },
    })
  }

  let updateSubtaskEditKey = (status: Status, i: number) => {
    setSubtaskEditKey((prevState) => {
      return {
        ...prevState,
        status,
        index: i,
      }
    })
  }

  let isOpen = () => {
    let key: keyof typeof initialPopupState
    for (key in isPopupOpen) {
      if (isPopupOpen[key]) {
        return true
      }
    }
    return false
  }

  let openPopup = (key: string) => {
    setIsPopupOpen((prevState) => {
      let value = key == 'sidebarPopup' ? !prevState[key] : true
      return {
        ...prevState,
        [key]: value,
      }
    })
  }
  let closePopup = () => {
    setIsPopupOpen(initialPopupState)
    setSubtaskEditKey(initialSubtaskEditKey)
  }

  useEffect(() => {
    actionKanban('EDIT BOARD', '', board)
    actionBoard('INITIALIZE BOARD', '', activeBoard)
    const handleResize = () => {
      if (window.innerWidth < 575) {
        setIsMobile(true)
      } else {
        setIsMobile(false)
      }
    }
    handleResize()
    window.addEventListener('resize', handleResize)

    return () => {
      window.removeEventListener('resize', handleResize)
    }
  }, [activeBoard])

  return (
    <div className="" style={{ position: 'relative' }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <Header
          theme={theme}
          isMobile={isMobile}
          openPopup={openPopup}
          isSidebarOpen={isPopupOpen.sidebarPopup}
          board={board}
          closePopup={closePopup}
        />
      </header>
      <Overlay isOpen={isOpen} closePopup={closePopup} />
      <main>
        {isOpen() && (
          <div className={`${styles.popupWrapper}`}>
            {isPopupOpen.taskPopup && <TaskForm theme={theme} />}
            {isPopupOpen.subtaskPopup && (
              <SubtaskForm
                theme={theme}
                taskObj={tas}
                actionBoard={actionBoard}
              />
            )}
            {isPopupOpen.boardPopup && (
              <BoardForm
                theme={theme}
                actionKanban={actionKanban}
                closePopup={closePopup}
              />
            )}
            {isPopupOpen.removePopup && <Remove theme={theme} />}
          </div>
        )}
        {isPopupOpen.sidebarPopup && (
          <Sidebar
            isMobile={isMobile}
            theme={theme}
            toggleTheme={toggleTheme}
            boardList={boardList}
            board={board}
            handleActiveBoard={handleActiveBoard}
            openPopup={openPopup}
            closePopup={closePopup}
          />
        )}
        <Board
          theme={theme}
          board={board}
          openPopup={openPopup}
          updateSubtaskEditKey={updateSubtaskEditKey}
          // handleKanban={handleKanban}
        />
        <div style={{ position: 'absolute' }}></div>
      </main>
    </div>
  )
}

export default Home
