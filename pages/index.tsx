import { useState, useEffect, useReducer } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/modules/App.module.css'

// Types
import { Board as BoardType, Task, Status } from '../src/@types/board'

// Custom Hooks
import { useAppContext } from '../src/context/useAppContext'
import { useBoard } from '../src/hooks/useBoard'

// Components
import { Header } from '../src/components/Header/Header'
import { Popup } from '../src/components/Popup'
import { Board } from '../src/components/Board/Board'
import { Sidebar } from '../src/components/Sidebar/Sidebar'
import { Overlay } from '../src/components/Overlay'

// Initial State Values
import { initPopupState } from '../lib/initialStates'

type SubtaskEditType = {
  status: Status
  index: number
}
const initialSubtaskEditKey: SubtaskEditType = {
  status: 'todo',
  index: -1,
}

const Home: NextPage = () => {
  // TODO add character limit
  const [isMobile, setIsMobile] = useState<boolean>(true)
  const [isPopupOpen, setIsPopupOpen] = useState(initPopupState)
  const [subtaskEditKey, setSubtaskEditKey] = useState<SubtaskEditType>(
    initialSubtaskEditKey
  )
  const [isHidden, setIsHidden] = useState(true)

  let {
    kanban,
    actionKanban,
    toggleTheme,
    theme,
    activeBoard,
    handleActiveBoard,
    boardList,
  } = useAppContext()

  const [board, setBoard] = useReducer(useBoard, activeBoard)

  let { index: taskIndex } = subtaskEditKey
  // TODO should be able to simplify
  // also, below may return undefined
  // do i need safety check or can i use to my advantage?
  // i am using id property but some places i refer to it as index
  let t = board.tasks.find((task) => task.id == taskIndex)!
  let nextTaskId =
    board.tasks.length > 0 ? board.tasks[board.tasks.length - 1].id + 1 : 1

  let actionBoard = (
    type: string,
    key: string,
    value: Task | BoardType | string
  ) => {
    setBoard({
      type,
      payload: { key, value },
    })
  }

  let updateSubtaskEditKey = (status: Status, i: number) => {
    setSubtaskEditKey((prevState) => {
      return {
        ...prevState,
        status,
        index: i,
      }
    })
  }

  let isOpen = (openBoard = false, isNewBoard = false) => {
    let key: keyof typeof initPopupState
    for (key in isPopupOpen) {
      if (key == 'boardPopup') {
        if (isPopupOpen[key].isOpen) {
          return true
        }
      } else if (key == 'removePopup') {
        if (isPopupOpen[key].isBoard || isPopupOpen[key].isTask) {
          return true
        }
      } else if (isPopupOpen[key]) {
        return true
      }
    }
    return false
  }

  let openPopup = (key: string, isNewBoard = false, objToDelete = '') => {
    setIsPopupOpen((prevState) => {
      let value = key == 'sidebarPopup' ? !prevState[key] : true
      if (key == 'boardPopup') {
        return {
          ...prevState,
          boardPopup: {
            isOpen: true,
            isNew: isNewBoard,
          },
        }
      }
      if (key == 'removePopup') {
        return {
          ...prevState,
          removePopup: {
            isTask: objToDelete == 'task',
            isBoard: objToDelete == 'board',
          },
        }
      }
      return {
        ...prevState,
        [key]: value,
      }
    })
  }
  let closePopup = (exception: boolean = false) => {
    setIsPopupOpen(initPopupState)
    if (!exception) {
      setSubtaskEditKey(initialSubtaskEditKey)
    }
  }
  let toggleHidden = () => {
    setIsHidden((pre) => !pre)
  }

  useEffect(() => {
    if (!boardList.some((name) => name == activeBoard.name)) {
      handleActiveBoard(0)
    }
    actionBoard('INITIALIZE BOARD', '', activeBoard)
    // actionKanban('UPDATE BOARD', '', board)

    const handleResize = () => {
      if (window.innerWidth < 768) {
        setIsMobile(true)
      } else {
        setIsMobile(false)
      }
    }
    handleResize()
    window.addEventListener('resize', handleResize)

    return () => {
      window.removeEventListener('resize', handleResize)
    }
  }, [activeBoard, boardList[0]])
  // }, [activeBoard, boardList[0]])

  return (
    <div className={`${styles.app}`}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <Header
          theme={theme}
          isMobile={isMobile}
          openPopup={openPopup}
          isSidebarOpen={isPopupOpen.sidebarPopup || !isHidden}
          board={board}
          closePopup={closePopup}
        />
      </header>
      {
        <Overlay
          isOpen={isOpen}
          closePopup={closePopup}
          isMobile={isMobile}
          isSidebar={isPopupOpen.sidebarPopup}
        />
      }
      <main className={`${styles.main} ${!isHidden && styles.columns}`}>
        {isOpen() && (
          <div className={`${styles.popupWrapper}`}>
            <Popup
              theme={theme}
              actionKanban={actionKanban}
              actionBoard={actionBoard}
              board={board}
              boardList={boardList}
              boardName={!isPopupOpen.boardPopup.isNew && board.name}
              handleActiveBoard={handleActiveBoard}
              closePopup={closePopup}
              openPopup={openPopup}
              task={isPopupOpen.removePopup.isTask && t}
              taskObj={t}
              nextTaskId={nextTaskId}
              isPopupOpen={isPopupOpen}
            />
          </div>
        )}
        <div>
          {((isMobile && isPopupOpen.sidebarPopup) || !isMobile) && (
            <Sidebar
              isMobile={isMobile}
              theme={theme}
              toggleTheme={toggleTheme}
              boardList={boardList}
              board={board}
              handleActiveBoard={handleActiveBoard}
              openPopup={openPopup}
              closePopup={closePopup}
              isHidden={isHidden}
              toggleHidden={toggleHidden}
            />
          )}
        </div>
        <Board
          theme={theme}
          board={board}
          openPopup={openPopup}
          updateSubtaskEditKey={updateSubtaskEditKey}
          isHidden={isHidden}
          isMobile={isMobile}
        />
      </main>
    </div>
  )
}

export default Home
