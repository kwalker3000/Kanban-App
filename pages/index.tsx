import { useState, useEffect, useReducer } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
// import styles from '../styles/Home.module.css'
import styles from '../styles/modules/App.module.css'
import { Theme, Title } from '../src/@types/app'
import { Board as BoardType, Task, Status } from '../src/@types/board'

import { useAppContext } from '../src/context/useAppContext'
import { useBoard } from '../src/hooks/useBoard'

// Components
import { Header } from '../src/components/Header/Header'
import { TaskForm } from '../src/components/Forms/TaskForm'
import { SubtaskForm } from '../src/components/Forms/SubtaskForm'
import { BoardForm } from '../src/components/Forms/BoardForm'
import { Remove } from '../src/components/Forms/Remove'
import { Board } from '../src/components/Board/Board'
import { Sidebar } from '../src/components/Sidebar/Sidebar'
import { Overlay } from '../src/components/Overlay'

const initialPopupState = {
  taskPopup: false,
  subtaskPopup: false,
  boardPopup: {
    isOpen: false,
    isNew: false,
  },
  removePopup: {
    isTask: false,
    isBoard: false,
  },
  sidebarPopup: false,
}
type SubtaskEditType = {
  status: Status
  index: number
}
const initialSubtaskEditKey: SubtaskEditType = {
  status: 'todo',
  index: -1,
}

const Home: NextPage = () => {
  // TODO add character limit
  const [isMobile, setIsMobile] = useState<boolean>(true)
  const [isPopupOpen, setIsPopupOpen] = useState(initialPopupState)
  const [subtaskEditKey, setSubtaskEditKey] = useState<SubtaskEditType>(
    initialSubtaskEditKey
  )
  const [isHidden, setIsHidden] = useState(true)

  let {
    kanban,
    actionKanban,
    toggleTheme,
    theme,
    activeBoard,
    handleActiveBoard,
    boardList,
  } = useAppContext()

  const [board, setBoard] = useReducer(useBoard, activeBoard)

  let { status: taskStatus, index: taskIndex } = subtaskEditKey
  // TODO should be able to simplify
  // also, below may return undefined
  // do i need safety check or can i use to my advantage?
  // i am using id property but some places i refer to it as index
  let t = board.tasks.find((task) => task.id == taskIndex)!
  let nextTaskId =
    board.tasks.length > 0 ? board.tasks[board.tasks.length - 1].id + 1 : 1

  type BoardObj = Task
  let actionBoard = (type: string, key: string, value: Task | BoardType) => {
    setBoard({
      type,
      payload: { key, value },
    })
  }

  let updateSubtaskEditKey = (status: Status, i: number) => {
    setSubtaskEditKey((prevState) => {
      return {
        ...prevState,
        status,
        index: i,
      }
    })
  }

  let isOpen = (openBoard = false, isNewBoard = false) => {
    let key: keyof typeof initialPopupState
    for (key in isPopupOpen) {
      if (key == 'boardPopup') {
        if (isPopupOpen[key].isOpen) {
          return true
        }
      } else if (key == 'removePopup') {
        if (isPopupOpen[key].isBoard || isPopupOpen[key].isTask) {
          return true
        }
      } else if (isPopupOpen[key]) {
        console.log(key)
        return true
      }
    }
    return false
  }

  let openPopup = (key: string, isNewBoard = false, objToDelete = '') => {
    setIsPopupOpen((prevState) => {
      let value = key == 'sidebarPopup' ? !prevState[key] : true
      if (key == 'boardPopup') {
        return {
          ...prevState,
          boardPopup: {
            isOpen: true,
            isNew: isNewBoard,
          },
        }
      }
      if (key == 'removePopup') {
        console.log('yessssir')
        return {
          ...prevState,
          removePopup: {
            isTask: objToDelete == 'task',
            isBoard: objToDelete == 'board',
          },
        }
      }
      // if (key == 'board')
      return {
        ...prevState,
        [key]: value,
      }
    })
  }
  let closePopup = (exception: boolean = false) => {
    setIsPopupOpen(initialPopupState)
    if (!exception) {
      setSubtaskEditKey(initialSubtaskEditKey)
    }
  }
  let toggleHidden = () => {
    setIsHidden((pre) => !pre)
  }

  useEffect(() => {
    if (!boardList.some((name) => name == activeBoard.name)) {
      handleActiveBoard(0)
    }
    actionKanban('UPDATE BOARD', '', board)
    actionBoard('INITIALIZE BOARD', '', activeBoard)

    const handleResize = () => {
      if (window.innerWidth < 768) {
        setIsMobile(true)
      } else {
        setIsMobile(false)
      }
    }
    handleResize()
    window.addEventListener('resize', handleResize)

    return () => {
      window.removeEventListener('resize', handleResize)
    }
  }, [activeBoard, boardList[0]])

  console.log(isPopupOpen)
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <Header
          theme={theme}
          isMobile={isMobile}
          openPopup={openPopup}
          isSidebarOpen={isPopupOpen.sidebarPopup || !isHidden}
          board={board}
          closePopup={closePopup}
        />
      </header>
      {
        <Overlay
          isOpen={isOpen}
          closePopup={closePopup}
          isMobile={isMobile}
          isSidebar={isPopupOpen.sidebarPopup}
        />
      }
      <main className={`${styles.main} ${!isHidden && styles.columns}`}>
        {isOpen() && (
          <div className={`${styles.popupWrapper}`}>
            {isPopupOpen.taskPopup && (
              <TaskForm
                theme={theme}
                nextTaskId={nextTaskId}
                taskObj={t}
                actionBoard={actionBoard}
                closePopup={closePopup}
              />
            )}
            {isPopupOpen.subtaskPopup && (
              <SubtaskForm
                theme={theme}
                taskObj={t} //task
                actionBoard={actionBoard}
                openPopup={openPopup}
                closePopup={closePopup}
              />
            )}
            {isPopupOpen.boardPopup.isOpen && (
              <BoardForm
                theme={theme}
                actionKanban={actionKanban}
                closePopup={closePopup}
                boardList={boardList}
                boardName={!isPopupOpen.boardPopup.isNew && board.name}
              />
            )}
            {(isPopupOpen.removePopup.isBoard ||
              isPopupOpen.removePopup.isTask) && (
              <Remove
                theme={theme}
                closePopup={closePopup}
                actionKanban={actionKanban}
                actionBoard={actionBoard}
                handleActiveBoard={handleActiveBoard}
                board={board}
                boardList={boardList}
                task={isPopupOpen.removePopup.isTask && t}
              />
            )}
          </div>
        )}
        <div className={`${!isMobile && styles.sidebar}`}>
          {(isMobile && isPopupOpen.sidebarPopup) ||
            (!isMobile && (
              <Sidebar
                isMobile={isMobile}
                theme={theme}
                toggleTheme={toggleTheme}
                boardList={boardList}
                board={board}
                handleActiveBoard={handleActiveBoard}
                openPopup={openPopup}
                closePopup={closePopup}
                isHidden={isHidden}
                toggleHidden={toggleHidden}
              />
            ))}
        </div>
        <div className={`${styles.board}`}>
          <Board
            theme={theme}
            board={board}
            openPopup={openPopup}
            updateSubtaskEditKey={updateSubtaskEditKey}
            isHidden={isHidden}
            // handleKanban={handleKanban}
          />
        </div>
      </main>
    </div>
  )
}

export default Home
